#include <iostream>
#include <fstream>
#include <vector>
#include <ctime>
#include <stdlib.h>

#include <cuda_runtime.h>
#include "hashiru_cuda.cuh"

/*** Useful GPU Macros ***/
#define gpuErrChk(ans) { gpuAssert((ans), __FILE__, __LINE__); }
inline void gpuAssert(cudaError_t code,
                      const char *file,
                      int line,
                      bool abort=true) {
  if (code != cudaSuccess) {
    fprintf(stderr,"GPUassert: %s %s %d\n",
            cudaGetErrorString(code), file, line);
    exit(code);
  }
}

using namespace std;

int main(int argc, char **argv)
{
    /*** Communal Setup ***/
    if(argc != 5)
    {
        cerr << "usage: hashiru path_to_dict hash_to_crack threads_per_block num_blocks" << endl;
        return EXIT_FAILURE;
    }
    char *dict_path = argv[1];
    char *to_crack = argv[2];

    ifstream dict_file;
    vector<string> dict;
    string temp;

    dict_file.open(dict_path);
    if(!dict_file)
    {
        cerr << "fatal: can't open dictionary file" << endl;
        return EXIT_FAILURE;
    }

    int max_length = -1;
    while(!dict_file.eof())
    {
        dict_file >> temp;
        dict.push_back(temp);
        if(temp.length() > max_length)
        {
            max_length = temp.length();
        }
    }

    /*** CPU Implementation ***/
    clock_t start_cpu;
    double duration;
    string cur, cur_hash;
    int found = 0;
    start_cpu = clock();
    for(vector<string>::iterator it = dict.begin(); it != dict.end(); ++it)
    {
        cur = *it;
        //TODO: cur_hash = salsa20(cur);
        if(cur_hash.compare(to_crack) == 0)
        {
            duration = (clock() - start_cpu) / (double) CLOCKS_PER_SEC;
            cout << "PASSWORD FOUND" << endl;
            cout << "Hash: " << to_crack << " is generated by: " << cur << endl;
            cout << "CPU time taken: " << duration << " seconds" << endl;
            found = 1;
            break;
        }
    }
    if(!found)
    {
        duration = (clock() - start_cpu) / (double) CLOCKS_PER_SEC;
        cout << "Did not find password matching hash in dictionary" << endl;
        cout << "CPU time taken: " << duration << " seconds" << endl;
    }

    /*** GPU Implementation ***/
    const int threads_per_block = atoi(argv[3]);
    const int num_blocks = atoi(argv[4]);
    float time_taken;
    int correct_idx = -1;
    cudaEvent_t start;
    cudaEvent_t stop;

#define START_TIMER() {                         \
      gpuErrChk(cudaEventCreate(&start));       \
      gpuErrChk(cudaEventCreate(&stop));        \
      gpuErrChk(cudaEventRecord(start));        \
    }

#define STOP_RECORD_TIMER(name) {                           \
      gpuErrChk(cudaEventRecord(stop));                     \
      gpuErrChk(cudaEventSynchronize(stop));                \
      gpuErrChk(cudaEventElapsedTime(&name, start, stop));  \
      gpuErrChk(cudaEventDestroy(start));                   \
      gpuErrChk(cudaEventDestroy(stop));                    \
    }



    // Allocate memory on the GPU
    char *dev_dict;
    int *dev_correct_idx;
    gpuErrChk(cudaMalloc((void **) &dev_dict, dict.size() * max_length * sizeof(char)));
    gpuErrChk(cudaMemset(dev_dict, 0, dict.size() * max_length * sizeof(char)));
    gpuErrChk(cudaMalloc((void **) &dev_correct_idx, sizeof(int)));
    gpuErrChk(cudaMemset(dev_correct_idx, -1, sizeof(int)));
    // Copy over all the strings in the dict to the GPU memory
    // Yes, we are wasting memory by padding out all strings to
    // the max length, but C strings are unpleasant and this is a
    // fast and dirty fix.
    int idx;
    for(vector<string>::iterator it = dict.begin(); it != dict.end(); ++it)
    {
        idx = it - dict.begin();
        temp = *it;
        gpuErrChk(cudaMemcpy(dev_dict + max_length * idx, temp.c_str(), temp.length() * sizeof(char), cudaMemcpyHostToDevice));
    }

    START_TIMER();
    cudaCallCrackHashKernel(num_blocks, threads_per_block, dev_dict, max_length, dict.size(), to_crack, dev_correct_idx);
    STOP_RECORD_TIMER(time_taken);
    gpuErrChk(cudaMemcpy(&correct_idx, dev_correct_idx, sizeof(int), cudaMemcpyDeviceToHost));
    if(correct_idx == -1)
    {
        cout << "Did not find password matching hash in dictionary" << endl;
        cout << "GPU time taken: " << time_taken / 1000.0 << " seconds" << endl;
    }
    else
    {
        cout << "PASSWORD FOUND" << endl;
        cout << "Hash: " << to_crack << " is generated by: " << dict.at(correct_idx) << endl;
        cout << "GPU time taken: " << time_taken / 1000.0 << " seconds" << endl;
    }
    cout << "GPU speedup factor is: " << duration / (time_taken / 1000.0) << endl;

    /*** Cleanup ***/
    dict_file.close();
    cudaFree(dev_dict);
    cudaFree(dev_correct_idx);
    return 0;
}
