#include <iostream>
#include <fstream>
#include <vector>
#include <ctime>
#include <stdlib.h>

#include <cuda_runtime.h>
#include "hashiru_cuda.cuh"

using namespace std;

int main(int argc, char **argv)
{
    /*** Communal Setup ***/
    if(argc != 3)
    {
        cerr << "usage: hashiru path_to_dict hash_to_crack" << endl;
        return EXIT_FAILURE;
    }
    char *dict_path = argv[1];
    char *to_crack = argv[2];

    ifstream dict_file;
    vector<string> dict;
    string temp;

    dict_file.open(dict_path);
    if(!dict_file)
    {
        cerr << "fatal: can't open dictionary file" << endl;
        return EXIT_FAILURE;
    }

    while(!dict_file.eof())
    {
        dict_file >> temp;
        dict.push_back(temp);
    }

    /*** CPU Implementation ***/
    clock_t start;
    double duration;
    string cur, cur_hash;
    int found = 0;
    start = clock();
    for(vector<string>::iterator it = dict.begin(); it != dict.end(); ++it)
    {
        cur = *it;
        //TODO: cur_hash = salsa20(cur);
        if(cur_hash.compare(to_crack) == 0)
        {
            duration = (clock() - start) / (double) CLOCKS_PER_SEC;
            cout << "PASSWORD FOUND" << endl;
            cout << "Hash: " << to_crack << " is generated by: " << cur << endl;
            cout << "Time taken: " << duration << " seconds" << endl;
            found = 1;
            break;
        }
    }
    if(!found)
    {
        duration = (clock() - start) / (double) CLOCKS_PER_SEC;
        cout << "Did not find password matching hash in dictionary" << endl;
        cout << "Time taken: " << duration << " seconds" << endl;
    }

    /*** GPU Implementation ***/
    return 0;
}
